@using Feature.Wealth.Component.Models.SearchBar
@using Xcms.Sitecore.Foundation.Basic.SitecoreExtensions
@using Feature.Wealth.Component.Models
@using Feature.Wealth.Component.Repositories
@using Foundation.Wealth.Helper;

@model SearchBarModel
@if (!Model.IsValid)
{
    return;
}
<section class="l-siteSearch">
    <div class="l-siteSearch__wrap">
        <div class="l-siteSearch__box">
            <search class="c-siteSearch">
                <div class="c-siteSearch__type">
                    <!-- 選全部，要隱藏"進階搜尋"，故增加 id 供下方 script 控制使用 -->
                    <select id="SearchCategory" class="o-selectbox o-selectbox--full o-selectbox--shadow" data-selection-css-class="select2-selection--shadow" data-selectbox="true" data-width="100%">
                        @foreach (var item in Model.HotKeyWords)
                        {
                            var val = item.GetFieldValue(Templates.SourceItem.Fields.LinkText);
                            var link = item.TargetItem(Templates.HotKeyWordSourceItem.Fields.SearchLink)?.Url() ?? item.TargetItem(Templates.SourceItem.Fields.LinkItem)?.Url();
                            var isSiteProductSearch = item.IsChecked(Templates.HotKeyWordSourceItem.Fields.IsSiteProductSearch);
                            var productType = CommonRepository.GetEnumValueFromDescription<ProductTypeEnum>(val);
                            <option value="@val" data-producttype="@productType" data-advance-url="@link" data-advance-hidden="@(isSiteProductSearch ? "true" : "false")">@val</option>
                        }
                    </select>
                </div>
                <div class="c-siteSearch__keyword">
                    <!-- [data-clear="true"]: 套用清除按鈕功能 -->
                    <div class="o-actionbox o-actionbox--full" data-clear="true">
                        <!-- #keyword: 請見頁面下方的script邏輯，套用jquery.autocomplete套件 -->
                        <!-- [data-clear="textbox"]: 套用清除按鈕功能，標示此為文字輸入框 -->
                        <input insertKeywords issearchbar="true" eh-search-pageid="@Sitecore.Context.Item.ID.Guid" id="keyword" type="search" class="o-actionbox__input o-actionbox__input--shadow" data-clear="textbox" placeholder="請輸入代碼或名稱" autocomplete="off">
                        <button type="submit" class="o-actionbox__btn o-actionbox__btn--magnifier"></button>
                        <!-- [data-clear="button"]: 套用清除按鈕功能，標示此為清除按鈕 -->
                        <button type="button" class="o-actionbox__clear" data-clear="button">清除</button>
                    </div>
                </div>
                <!-- .u-hidden: 隱藏不顯示 -->
                <div class="c-siteSearch__advance u-hidden">
                    <a href="javascript:;" class="o-btn o-btn--primary o-btn--icon">
                        進階搜尋
                        <img src="~/themes/images/icons/white/corner-right.svg" class="o-btn__icon o-btn__icon--xs" alt="進階搜尋">
                    </a>
                </div>
            </search>
        </div>
        <div class="l-siteSearch__keyword">
            <div class="c-hotword">
                <div class="c-hotword__title">@Html.Sitecore().Field(Templates.SearchBar.Fields.Title.ToString(), Model.DataSource)</div>
                <div class="c-hotword__list">
                    @foreach (var item in Model.HotKeyWords)
                    {
                        var template = item.TargetItem(Templates.SourceItem.Fields.FieldTemplate);
                        var source = item.TargetItem(Templates.SourceItem.Fields.Datasource);
                        var link = item.TargetItem(Templates.SourceItem.Fields.LinkItem)?.Url();
                        var val = item.GetFieldValue(Templates.SourceItem.Fields.LinkText);
                        if (source == null || template == null)
                        {
                            continue;
                        }
                        <ul class="l-tag u-hidden" data-hot-val="@val">
                            @foreach (var tag in source.GetMultiListValueItems(template.ID))
                            {
                                var name = tag.GetFieldValue("Tag Name");
                                var url = link + "?hotword=" + name;
                                <li class="l-tag__item">
                                    <a href="@url" class="o-capsule">@name</a>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</section>
<template id="tmplKeywordNotFound">
    <div class="c-empty">
        <div class="c-empty__img">
            <img src="~/themes/images/lions/lion-keyword.svg" alt="">
        </div>
        <div class="c-empty__desc">哎呀！沒找到耶...<br>試試看其他關鍵字吧</div>
    </div>
</template>
<script>
    (function ($, window, document) {

        document.addEventListener('DOMContentLoaded', function () {
            if (!jQuery) {
                return;
            }

            SC_DATA.S_IsInitial = true;
            SC_DATA.S_Result = {
                FundProducts: [],
                ETFProducts: [],
                ForeignStocks: [],
                StructuredProducts: []
            }

            // 搜尋全部，隱藏進階搜尋
            $('#SearchCategory').on('change', function (e) {
                let option = $(this).find(":selected");
                SC_DATA.S_Option = option;
                $('.c-siteSearch__advance').toggleClass('u-hidden', option.data('advance-hidden'))
                    .off('click', advanceOnClick).on('click', advanceOnClick);

                function advanceOnClick() {
                    redirect(option.data('advance-url'));
                }

                $('[data-hot-val]').each(function (i, item) {
                    $(item).toggleClass('u-hidden', $(item).data('hot-val') != option.text());
                });

                SC_DATA.SearchBar = {
                    QueryList: function () {
                        var query = null;
                        let type = SC_DATA.S_Option.data('producttype');
                        SC_DATA.S_ProductType = type;
                        switch (type) {
                            case 'Fund':
                                generateSearch();
                                break;
                            case 'ETF':
                                generateSearch();
                                break;
                            case 'StructuredProduct':
                                generateSearch();
                                break;
                            case 'ForeignStock':
                                generateSearch();
                                break;
                            case 'All':
                                query = apiRequest('@ClientRoute.GenerateUrl(this, "SearchBar", "GetSearchResult")');
                                break;
                        }

                        query?.then((data) => {
                            console.log(data);
                            SC_DATA.S_Result = data;
                            generateSearch();

                            $('[data-tab] [data-tab-target]').first().trigger('switch');
                            $('[data-filter-switch="#uid-template-marketPrice-original"]').trigger('change');
                        }).catch((error) => {
                            console.log(error);
                        });
                    }
                };

                SC_DATA.SearchBar.QueryList();

            }).trigger('change');

            // Get the input field
            var input = document.getElementById('keyword');

            // Execute a function when the user presses a key on the keyboard
            input.addEventListener('keypress', function (event) {
                // If the user presses the "Enter" key on the keyboard
                if (event.key === 'Enter') {
                    // Cancel the default action, if needed
                    event.preventDefault();
                    // Trigger the button element with a click
                    keywordSearch();
                }
            });

            $('.o-actionbox__btn', '.c-siteSearch__keyword').on('click', keywordSearch);

            function keywordSearch() {
                insertKeywords();

                let option = SC_DATA.S_Option;
                redirect(option.data('advance-url') + '?word=' + DOMPurify.sanitize(input.value));
            }

            function redirect(url) {
                location.href = new URL(location.origin + url.replace(location.origin, ''));
            }

            function apiRequest(url, params) {
                return new Promise((resolve, reject) => {
                    $.ajax({
                        url,
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        data: params ? JSON.stringify(params) : null,
                        success: function (data) {
                            resolve(data);
                        },
                        error: function (xhr, status, errorThrown) {
                            reject({ xhr, status, errorThrown });
                        }
                    });
                });
            }

            function initAutocomplete() {
                // 關鍵字搜尋 autocomplete，參考套件：https://github.com/devbridge/jQuery-Autocomplete
                $('#keyword').autocomplete({
                    max: 10,
                    noCache: true,
                    minChars: 0,
                    containerClass: 'autocomplete-suggestions autocomplete-suggestions--keyword',
                    maxHeight: 'auto',
                    zIndex: 5,
                    preserveInput: true,
                    showNoSuggestionNotice: true,
                    noSuggestionNotice: $('#tmplKeywordNotFound').html(),
                    lookup: function (query, done) {
                        // Do Ajax call or lookup locally, when done,
                        // call the callback and pass your results:
                        query = query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
                        let result = SC_DATA.S_SearchKeyword.filter(function (item) {
                            return query.length == 0 || new RegExp(query, 'gi').test(item.value);
                        });
                        done({
                            suggestions: result.slice(0, 5)
                        });
                    },
                    onSearchComplete: function (query, suggestions) {
                        var autocomplete = $(this).autocomplete();
                        var container = autocomplete.suggestionsContainer;
                        var $this = $(this);

                        // 取消套件預設 blur 事件會關閉 suggestions container
                        $this.off('blur.autocomplete');

                        // 綁定 window click 事件，點擊頁面其他的地方時可關閉 suggestions container
                        if (autocomplete.isRegisteGlobalEvent != true) {
                            $(window).on('click.autocomplete', {
                                source: this
                            }, e => {
                                if (e.target != e.data.source) {
                                    autocomplete.hide();
                                }
                            });
                            autocomplete.isRegisteGlobalEvent = true;
                        }

                        //if (SC_DATA.IsLoggedIn) {
                        //    // 停止 like/compare icon 冒泡，避免觸發 autocomplete 的 select 事件，導致 suggestions container 被關閉
                        //    $(container).find('.o-statusBtn').off('click.autocomplete').on('click.autocomplete', function (e) {
                        //        e.stopPropagation();
                        //    });
                        //} else {
                        //    // 停止 compare icon 冒泡，避免觸發 autocomplete 的 select 事件，導致 suggestions container 被關閉
                        //    $(container).find('.o-statusBtn--compare').off('click.autocomplete').on('click.autocomplete', function (e) {
                        //        e.stopPropagation();
                        //    });
                        //}
                      
                        // 綁定 like icon 的互動功能
                        $(container).find('[data-ia]').interactive();
                        // 綁定 like icon 的彈跳登入畫面
                        $(container).find('[data-popup]').magnificPopup();
                        //$(container).find('[eh-compare]').trigger('exec').attr('data-after-lt', null);
                        $(container).find('[eh-focus]').trigger('exec');
                        $(container).find('[eh-subscription-type]').trigger('exec');
                    },
                    formatResult: function (suggestion, currentValue) {
                        let detailUrl = suggestion.data.detailUrl ? suggestion.data.detailUrl : '#';

                        // like 按鈕
                        let $like = `<a ${suggestion.data.focusBtnHtml}></a>`;
                        // 
                        let $compare = `<div class="c-itemKeyword__collections">${suggestion.data.compareBtnHtml}</div>`;
                        
                        // 申購按鈕
                        let $purchase = suggestion.data.purchase ? `<div class="c-itemKeyword__actions"><a ${suggestion.data.subscribeBtnHtml}>申購</a></div>` : '';

                        return `<div class="c-itemKeyword">
                            <a href="${detailUrl}" class="c-itemKeyword__content" target="_blank">
                                <div class="c-itemKeyword__type">${suggestion.data.type}</div>
                                <div class="c-itemKeyword__title">${$.Autocomplete.defaults.formatResult(suggestion, currentValue)}</div>
                            </a>
                            <div class="c-itemKeyword__collections">${$like}</div>
                            ${(suggestion.data.compareBtnHtml ? $compare : '')}
                            ${$purchase}
                        </div>`;
                    }
                });
            }

            function generateSearch() {
                let list = [];
                if (Object.keys(SC_DATA.S_Result).length != 0) {

                    switch (SC_DATA.S_ProductType) {
                        case 'Fund':
                            getFundResult(list);
                            break;
                        case 'ETF':
                            getETFResult(list);
                            break;
                        case 'ForeignStock':
                            getForeignStockResult(list);
                            break;
                        case 'StructuredProduct':
                            getStructuredProductResult(list);
                            break;
                        case 'All':
                            getFundResult(list);
                            getETFResult(list);
                            getForeignStockResult(list);
                            getStructuredProductResult(list);
                            break;
                    }

                    if (list.length > 0) {
                        SC_DATA.S_SearchKeyword = list;
                        if (SC_DATA.S_IsInitial) {
                            initAutocomplete();
                            SC_DATA.S_IsInitial = false;
                        }
                    }
                }
            }

            function getType() {
                return SC_DATA.S_Option.val() == '全部' ? null : SC_DATA.S_Option.val();
            }

            function getFundResult(list) {
                $.each(SC_DATA.S_Result.FundProducts, function (i, item) {
                    let obj = {
                        value: item.ProductCode + ' ' + item.ProductName,
                        data: {
                            type: getType() || $('#SearchCategory option[data-producttype="Fund"]').val(),
                            detailUrl: '@Model.DetailPageLink.FundDetailPageLink' + '?' + $.param({ id: item.ProductCode }),
                            purchase: item.CanOnlineSubscription,
                            focusBtnHtml: item.FocusButtonAutoHtml,
                            compareBtnHtml: item.CompareButtonHtml,
                            subscribeBtnHtml: item.SubscribeButtonAutoHtml
                        }
                    };
                    list.push(obj);
                });
            }

            function getETFResult(list) {
                $.each(SC_DATA.S_Result.ETFProducts, function (i, item) {
                    let obj = {
                        value: item.FirstBankCode + ' ' + item.ETFName,
                        data: {
                            type: getType() || $('#SearchCategory option[data-producttype="ETF"]').val(),
                            detailUrl: '@Model.DetailPageLink.EtfDetailPageLink' + '?' + $.param({ id: item.FirstBankCode }),
                            purchase: item.CanOnlineSubscription,
                            focusBtnHtml: item.FocusButtonAutoHtml,
                            compareBtnHtml: item.CompareButtonHtml,
                            subscribeBtnHtml: item.SubscribeButtonAutoHtml
                        }
                    };
                    list.push(obj);
                });
            }

            function getForeignStockResult(list) {
                $.each(SC_DATA.S_Result.ForeignStocks, function (i, item) {
                    let obj = {
                        value: item.FirstBankCode + ' ' + item.ChineseName + ' ' + item.EnglishName,
                        data: {
                            type: getType() || $('#SearchCategory option[data-producttype="ForeignStock"]').val(),
                            detailUrl: '@Model.DetailPageLink.ForeignStockDetailPageLink' + '?' + $.param({ id: item.FirstBankCode }),
                            purchase: item.CanOnlineSubscription,
                            focusBtnHtml: item.FocusButtonAutoHtml,
                            subscribeBtnHtml: item.SubscribeButtonAutoHtml
                        }
                    };
                    list.push(obj);
                });
            }

            function getStructuredProductResult(list) {
                $.each(SC_DATA.S_Result.StructuredProducts, function (i, item) {
                    let obj = {
                        value: item.ProductCode + ' ' + item.ProductName,
                        data: {
                            type: getType() || $('#SearchCategory option[data-producttype="StructuredProduct"]').val(),
                            detailUrl: '@Model.DetailPageLink.StructuredProductDetailPageLink' + '?' + $.param({ id: item.ProductCode })
                        }
                    };
                    list.push(obj);
                });
            }
        });

    })(jQuery, window, document);

</script>