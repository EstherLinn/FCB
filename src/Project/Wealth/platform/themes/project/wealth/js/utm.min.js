(() => { const e = "website", t = (() => { let e = encodeURI(window.location.pathname).split("/").pop(); return e || (e = "第一銀行基金理財網"), e = e.toLocaleLowerCase().replace(" ", "-"), document.title || e })(), o = "wealth", n = ["facebook.com/sharer/", "social-plugins.line.me/lineit/share/", "access.line.me/oauth2/"], r = "href"; async function a(a) { let s = a.querySelectorAll('a[href^="/"],a[href^="https://"],a[href^="http://"]'); return await async function (a) { return a && a.length ? (a.forEach((a => { try { let s = new URL(window.encodeURI(a.href)); if (n.find((e => new RegExp(e, "gi").test(`${s.hostname}${s.pathname}`)))) return; let c, d = s.searchParams, i = "utm_source", l = "utm_medium", h = "utm_campaign"; d.delete(i), d.append(i, o), d.delete(l), d.append(l, e), d.delete(h), d.append(h, t), c = a.getAttribute(r).startsWith("/") ? encodeURI(`${s.pathname}${s.search}${s.hash}`) : encodeURI(s.toString()), c && a.setAttribute(r, c) } catch (e) { console.error(e) } })), Promise.resolve()) : Promise.resolve() }(s), Promise.resolve() } new MutationObserver(((e, t) => { for (const t of e) "childList" === t.type && t.addedNodes && t.addedNodes.length && t.addedNodes.forEach((e => { 1 === e.nodeType && a(e) })) })).observe(document.body, { subtree: !0, childList: !0 }), a(document).catch((e => console.log(e))) })();