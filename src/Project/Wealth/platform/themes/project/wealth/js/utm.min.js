(() => { const e = "website", t = (() => { let e = encodeURI(window.location.pathname).split("/").pop(); return e || (e = "第一銀行基金理財網"), e = e.toLocaleLowerCase().replace(" ", "-"), document.title || e })(), o = "wealth", a = ["facebook.com/sharer/", "social-plugins.line.me/lineit/share/", "access.line.me/oauth2/"], r = "href"; async function n(n) { let s = n.querySelectorAll('a[href^="/"],a[href^="https://"],a[href^="http://"]'); return await async function (n) { return n && n.length ? (n.forEach((n => { try { let s = new URL(n.href); if (a.find((e => new RegExp(e, "gi").test(`${s.hostname}${s.pathname}`)))) return; let c, l = s.searchParams, i = "utm_source", d = "utm_medium", h = "utm_campaign"; l.delete(i), l.append(i, o), l.delete(d), l.append(d, e), l.delete(h), l.append(h, t), c = n.getAttribute(r).startsWith("/") ? `${s.pathname}${s.search}${s.hash}` : s, c && n.setAttribute(r, c) } catch (e) { console.error(e) } })), Promise.resolve()) : Promise.resolve() }(s), Promise.resolve() } new MutationObserver(((e, t) => { for (const t of e) "childList" === t.type && t.addedNodes && t.addedNodes.length && t.addedNodes.forEach((e => { 1 === e.nodeType && n(e) })) })).observe(document.body, { subtree: !0, childList: !0 }), n(document).catch((e => console.log(e))) })();