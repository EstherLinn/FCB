(() => { const c = "website", h = (() => { let e = encodeURI(window.location.pathname).split("/").pop(); return e = (e = e || "第一銀行基金理財網").toLocaleLowerCase().replace(" ", "-"), document.title || e })(), d = "wealth", i = ["facebook.com/sharer/", "social-plugins.line.me/lineit/share/", "access.line.me/oauth2/"], p = "href"; async function o(e) { var e = e.querySelectorAll('a[href^="/"],a[href^="https://"],a[href^="http://"]'); return (e = e) && e.length && e.forEach(r => { try { let t = new URL(r.href); "_blank" === r.target && (e = location.hostname, t.hostname === e || /noopener|noreferrer/.test(r.rel) || (r.rel = "noopener noreferrer")); var e, o = i.find(e => { return new RegExp(e, "gi").test("" + t.hostname + t.pathname) }); if (!o) { var a = t.searchParams, n = "utm_source", s = "utm_medium", l = "utm_campaign"; a.delete(n), a.append(n, d), a.delete(s), a.append(s, c), a.delete(l), a.append(l, h); let e; (e = r.getAttribute(p).startsWith("/") ? "" + t.pathname + t.search + t.hash : t) && r.setAttribute(p, e) } } catch (e) { console.error(e) } }), await Promise.resolve(), Promise.resolve() } new MutationObserver((e, t) => { for (const r of e) "childList" === r.type && r.addedNodes && r.addedNodes.length && r.addedNodes.forEach(e => { 1 === e.nodeType && o(e) }) }).observe(document.body, { subtree: !0, childList: !0 }), o(document).catch(e => console.log(e)) })();