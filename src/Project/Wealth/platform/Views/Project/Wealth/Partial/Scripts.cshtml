@using Sitecore.Configuration;
@using Foundation.Wealth.Helper;
@{
    var AppPayLoginUrl = WebUtility.UrlDecode(Settings.GetSetting("AppPay.CallLoginUrl"));
    var MobileFristeLogin = WebUtility.UrlDecode(Settings.GetSetting("MobileFirste"));
    var MobileIleoLogin = WebUtility.UrlDecode(Settings.GetSetting("MobileIleo"));
    var domain = HttpContext.Current.Request.Url.Host;
    var sitecoredomain = Sitecore.Context.Site.TargetHostName;
    var url = HttpContext.Current.Request.Url.AbsoluteUri.Replace(domain, string.IsNullOrEmpty(sitecoredomain) ? domain : sitecoredomain);
    var newUri = new Uri(url);
    string uriSchemaAndHost = string.Format("{0}://{1}", newUri.Scheme, newUri.Host);
    var webBankLoginPath = ClientRoute.GenerateUrl(this, "Accounts", "SignInWebBankByApp");
    var encodeUrl = uriSchemaAndHost + webBankLoginPath;
    encodeUrl = WebUtility.UrlEncode(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(encodeUrl)));
}

@Html.AntiForgeryToken()

<script>
    (function ($, window, document, undefined) {
        let isKeywordFromSearchbar = true;
        let isLogin = false;
        if (SC_DATA.IsLoggedIn) {
            isLogin = true;
        }

        if (SC_DATA.IsGlobalStyle) {
            $('html').addClass('is-globalization');
        }

       function SetUrlCookie(){
           return new Promise((resolve, reject) => {
            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "Accounts", "SetUrlCookie")",
                data: { "url": '@url' },
                success: function(response) {
                    resolve(response);
                },
                error: function(error) {
                    reject(error);
                }
            });
         });
        }

        function GetUrlCookie(){
           return new Promise((resolve, reject) => {
            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "Accounts", "GetUrlCookie")",
                data: { "unlockBlock": false },
                success: function(response) {
                    resolve(response);
                },
                error: function(error) {
                    reject(error);
                }
               });
         });
        }

        //確保set完cookie後才取得cookie
        SetUrlCookie().then(function(resp){
            return GetUrlCookie();
        }).then(function(resp){
            if (resp) {
                    //被阻擋回首頁彈窗登入
                    if (!isLogin && resp.beBlock) {
                        $.magnificPopup.open({
                            items: {
                                src: '#popupLogin'
                            },
                            type: 'inline',
                            callbacks: {
                                close: function CancelBlock() {
                                    $.ajax({
                                        type: "post",
                                        url: "@ClientRoute.GenerateUrl(this, "Accounts", "GetUrlCookie")",
                                        data: { "unlockBlock": true },
                                        success: function (msg) {
                                            //關閉登入popup刪除block cookie
                                        },
                                    });
                                }
                            }
                        });
                    }
                }
        }).catch(function(error) {
        console.error('Error:', error);
        });

        if (isLogin) {
            let url = new URL(location.href);
            let isMemberHome = url.pathname.toLowerCase().includes('member-home');
            if (!isMemberHome) {
                $.ajax({
                    type: "post",
                    url: "@ClientRoute.GenerateUrl(this, "Accounts", "GetTrackList")",
                    success: function (msg) {
                        store.set('focus', msg);
                        $('[eh-focus]').trigger('exec');
                    },
                })
            }
        }
        /**
        * IsMobile 判斷是否為行動裝置
        */
        window.IsMobile = function () {
            const userAgent = navigator.userAgent;
            const isAndroid = /Android/i.test(userAgent);
            const isMobileUserAgent = /Mobi|iPhone|iPad|iPod|Macintosh|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
            // 檢查視窗寬度
            const isSmallScreen = window.matchMedia("only screen and (max-width: 1200px)").matches;
            return (isAndroid || isMobileUserAgent) && isSmallScreen
        }
        if (!IsMobile()) {
            const tabIdentifier = Date.now().toString();
            const storageKey = 'tabs' + dayjs().format('YYYY-MM-DD');
            //刪除前一天的localstorage
            const beforeOneDayKey = "tabs" + dayjs(Date.now() - (24 * 60 * 60 * 1000)).format('YYYY-MM-DD');
            store.remove(beforeOneDayKey);
            //載入頁面時加一個tab戳記
            ['DOMContentLoaded'].forEach(function (event) {
                window.addEventListener(event, function (e) {
                    const openTabs = JSON.parse(localStorage.getItem(storageKey) || '[]');
                    const updatedTabs = openTabs.filter(id => id.toString() !== tabIdentifier);
                    openTabs.push(tabIdentifier);
                    localStorage.setItem(storageKey, JSON.stringify(openTabs));
                    //如果登入狀態但已經關閉過頁面則登出
                    if (isLogin && updatedTabs.length === 0 && sessionStorage.getItem("visit") == null) {
                        let logOutRoute = new URL(location.protocol + "//" + location.host + "@ClientRoute.GenerateUrl(this, "Accounts", "Logout")");
                        location.href = logOutRoute;
                    }
                    sessionStorage.setItem("visit", true);
                });
            });

            //離開頁面後砍一個tab戳記
            ['unload'].forEach(function (event) {
                window.addEventListener(event, function (e) {
                    const openTabs = JSON.parse(localStorage.getItem(storageKey) || '[]');
                    const updatedTabs = openTabs.filter(id => id.toString() !== tabIdentifier);
                    localStorage.setItem(storageKey, JSON.stringify(updatedTabs));
                });
            });
        }
        window.CompareObj = function (id, type, name) {
            this.id = id;
            this.type = type;
            this.name = name;
        }

        window.FocsuObj = function (id, type) {
            this.id = id;
            this.type = type;
            this.trackDate = getNowDate();
        }

        window.checkItemExists = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value);
            if (idx < 0) {
                return false;
            } else {
                return true;
            }
        }

        window.addItem = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value.id);
            if (idx < 0) {
                existingEntries.push(value);
                store.set(key, existingEntries)
            }
        }

        window.removeItem = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value.id);
            if (idx > -1) {
                existingEntries.splice(idx, 1);
                store.set(key, existingEntries)
            }
        }

        window.getNowDate = function () {
           return dayjs().format('YYYY/MM/DD');
        }

        window.insertKeywords = function () {
            let self = $("input[insertKeywords]");
            let isSeachBar = self.attr("issearchbar");
            let urlParams = new URLSearchParams(window.location.search);
            let keyword = DOMPurify.sanitize(decodeURIComponent(urlParams.get('kw')));
            let params;

            if (isSeachBar == "true") {
                params = {
                    pageId: self.attr("eh-search-pageid"),
                    keyword: self.val().trim(),
                    productType: $("#SearchCategory").find('option:selected').attr('producttype')
                };
            }
            else {
                if (keyword != undefined && isKeywordFromSearchbar) {
                    isKeywordFromSearchbar = false;
                    return;
                }
                else {
                    params = {
                        pageId: self.attr("eh-search-pageid"),
                        word: self.val().trim(),
                        productType: self.attr('eh-search-type')
                    };
                }
            }

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "SearchKeywords", "Insert")',
                type: 'POST',
                data: params
            }).done(function (data, textStatus, jqXHR) {
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        }

        window.VerifyLoginRedirctToHome = function (verifyLogin) {
            if (!verifyLogin) {
                 $('[data-errormsg]', '#infoFail').text("由於長時間未操作，您的登入已過期，請重新登入。");
                    $.magnificPopup.open({
                        items: {
                            src: '#infoFail'
                        },
                        type: 'inline'
                    });
                let homePage = new URL(location.protocol + "//" + location.hostname);
                location.href = homePage;
            }
        }
        //共用ajax error時導回首頁
        window.AjaxErrorRedirctToHome = function () {
                let homePage = new URL(location.protocol + "//" + location.hostname);
                location.href = homePage;
        }
        /**
        * 解壓縮並解析 Base64 編碼的 GZip 壓縮數據
        * @param {string} base64String - 經過 Base64 編碼的 GZip 壓縮字串       
        */
        window.DecompressData = function(base64String) {
            let binaryString = atob(base64String);
            let len = binaryString.length;
            let bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            let decompressed = pako.inflate(bytes);
            let decodedString = new TextDecoder("utf-8").decode(decompressed);
            return JSON.parse(decodedString);
        }
        window.RiskHandler = function () {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '@ClientRoute.GenerateUrl(this, "Accounts", "GetCifMemberRisk")',
                    type: 'POST',
                    async: false,
                    data: { pageUrl: window.location.pathname + window.location.search },
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (xhr, status, errorThrown) {
                        reject({ xhr, status, errorThrown });
                    }
                });
            });
        }
        /**
       * OrderColumn 表格預設排序Style-
       * @@param {string} linkSelect Select選單data-tag
       * @@param {string} tableName 表格 data-tag
       * @@param {string} defaultColumn 預設排序欄位
       * @@parmm {string} orderType 排序方式
       * @@param {string} isTrigger 是否觸發功能,ajax可能第一次Call才需觸發
       */
        window.OrderColumnStyle = function (linkSelect, tableName, defaultColumn, orderType, isTrigger) {
            if (isTrigger) {
                //預設樣式
                $(`[data-sorting-column="${defaultColumn}"]`, `[data-table-name="${tableName}"]`).addClass(orderType);
                let $sortingbox = $(`[data-sorting-linkto="${linkSelect}"]`);
                let $option = $(`option[data-sorting-column="${defaultColumn}"][data-sorting-class="${orderType}"]`, $sortingbox);
                //同步行動板下拉選單
                if ($option.length != 0) {
                    $option.prop('selected', true);
                    $sortingbox.trigger('change');
                }
            }
        };
        /**
        * OrderColumn 表格預設排序
        * @@param {string} tableName 表格 data-tag
        * @@param {string} defaultColumn 預設排序欄位
        * @@parmm {string} orderType 排序方式
        * @@param {string} isTrigger 是否觸發功能,ajax可能第一次Call才需觸發
        */
        window.OrderColumn = function (tableName, defaultColumn, orderType, isTrigger) {
            if (isTrigger) {
                //預先給相反的class，點擊後才會是預想的排序方式
                orderType = orderType == "is-desc" ? "is-asc" : "is-desc";
                window.loading = () => 0;//蓋掉window.loading function，防止小獅子重複出現
                //預先給相反的class
                $(`[data-sorting-column="${defaultColumn}"]`, `[data-table-name="${tableName}"]`).addClass(orderType);
                //觸發click，行動版下拉選單會跟著同步
                $(`[data-sorting-column="${defaultColumn}"]`, `[data-table-name="${tableName}"]`).trigger('click.sorting');
                window.loading = (methodOrOptions) => $('.c-loading').loading(methodOrOptions);  // 重新定義 loading
            }
        }

        EventHandler.AddOnExec('compare-init', function (e) {
            let self = e.target;
            $(self).interactive();
            let id = self.getAttribute('eh-compare-id');
            let compare = store.get('compare') || [];
            if (checkItemExists('compare', id)) {
                $(self).addClass('is-active');
                self.setAttribute('data-tooltip', '取消比較');
                self.setAttribute('eh-compare-add', true);
            } else {
                $(self).removeClass('is-active');
                self.setAttribute('eh-compare-add', false);
            };
            if (compare.length == 7) {
                if (self.getAttribute('eh-compare-add').toString() == "false") {
                    self.setAttribute('href', '#popupCompareMax');
                    self.setAttribute('data-popup', true);
                    self.removeAttribute('data-ia');
                    self.removeAttribute('data-msg');
                    $(self).off('click.interactive');
                    $(self).removeData('plugin_interactive');
                    $(self).magnificPopup();
                }
            } else {
                self.setAttribute('href', '#');
                self.removeAttribute('data-popup');
                self.setAttribute('data-ia', 'true');
                self.setAttribute('data-msg', '加入比較|取消比較');
                $(self).interactive();
                $(self).off('click.magnificPopup');
            }
        });

        EventHandler.AddClick('compare-click', function (e) {
            let self = e.target;
            let id = self.getAttribute('eh-compare-id');
            let name = self.getAttribute('eh-compare-name');
            let type = self.getAttribute('eh-compare-type').toLowerCase();
            let obj = new CompareObj(id, type, name);
            let compare = store.get('compare') || [];
            if (self.getAttribute('eh-compare-add').toString() == "false") {
                if (compare.length < 7) {
                    addItem('compare', obj);
                    self.setAttribute('eh-compare-add', true);
                    if (compare.length == 6) {
                        $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                            ele.setAttribute('href', '#popupCompareMax');
                            ele.setAttribute('data-popup', true);
                            ele.removeAttribute('data-ia');
                            ele.removeAttribute('data-msg');
                            $(ele).off('click.interactive');
                            $(ele).removeData('plugin_interactive');
                            $(ele).magnificPopup();
                        })
                    }
                }
            } else {
                removeItem('compare', obj);
                self.setAttribute('eh-compare-add', false);
                if (compare.length == 7) {
                    $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                        ele.setAttribute('href', '#');
                        ele.removeAttribute('data-popup');
                        ele.setAttribute('data-ia', 'true');
                        ele.setAttribute('data-msg', '加入比較|取消比較');
                        $(ele).interactive();
                        $(ele).off('click.magnificPopup');
                    })
                }
            }
            //reload 側邊比較工具
            window.SetCompareList();
        });

        EventHandler.AddOnExec('focus-init', function (e) {
            let self = e.target;
            if (!isLogin) {
                self.setAttribute("href", "#popupLogin");
                self.setAttribute('data-popup', true);
                self.removeAttribute('data-ia');
                self.removeAttribute('data-msg');
                $(self).off('click.interactive');
                $(self).removeData('plugin_interactive');
                $(self).magnificPopup();
            } else {
                $(self).interactive();
                let id = self.getAttribute('eh-focus-id');
                if (id) {
                    if (checkItemExists('focus', id)) {
                        $(self).addClass('is-active');
                        self.setAttribute('data-tooltip', '取消關注');
                        self.setAttribute('eh-focus-add', true);
                    };
                } else {
                    $(self).off('click.interactive');
                    $(self).removeData('plugin_interactive');
                }
            }
        });

        EventHandler.AddClick('focus-click', function (e) {
            let self = e.target;
            if (isLogin) {
                let id = self.getAttribute('eh-focus-id');
                let name = self.getAttribute('eh-focus-name');
                let type = self.getAttribute('eh-focus-type');
                let obj = new FocsuObj(id, type);
                if (self.getAttribute('eh-focus-add').toString() == "false") {
                    addItem('focus', obj);
                    self.setAttribute('eh-focus-add', true);
                } else {
                    removeItem('focus', obj);
                    self.setAttribute('eh-focus-add', false);
                }
                if (id && name && type) {
                    $.ajax({
                        type: "post",
                        url: "@ClientRoute.GenerateUrl(this, "Accounts", "InsertTrack")",
                        data: { "trackList": store.get("focus") || [], "productId": id ,"pageUrl": window.location.pathname + window.location.search
                            , "productType": type},
                        beforeSend: function () { $('.c-loading').loading('show'); },
                        success: function (resp) {
                            if(!resp.success && resp.block)
                            {
                                    window.VerifyLoginRedirctToHome(resp.success);
                                    return;
                            }
                            if (!resp.success)
                            {
                                if (self.getAttribute('eh-focus-add').toString() == "true") {
                                    removeItem('focus', obj);
                                    self.setAttribute('eh-focus-add', false);
                                } else {
                                    addItem('focus', obj);
                                    self.setAttribute('eh-focus-add', true);
                                }
                            }
                        },
                        error: function (resp) {
                            //設置error
                            if (self.getAttribute('eh-focus-add').toString() == "true") {
                                removeItem('focus', obj);
                                self.setAttribute('eh-focus-add', false);
                            } else {
                                addItem('focus', obj);
                                self.setAttribute('eh-focus-add', true);
                            }
                        },
                        complete: function () {
                        $('.c-loading').loading('hide');
                    }
                    })
                }

            }
        });

        EventHandler.AddOnExec('subscription-init', function (e) {
            let self = e.target;
            if (!isLogin) {
                self.setAttribute("href", "#popupLogin");
            }
            else {
                self.setAttribute("href", "#popupPurchase");
            }
        });

        EventHandler.AddClick('subscription-click', function (e) {
            if (isLogin) {
                let self = e.target;
                let id = self.getAttribute('eh-subscription-id');
                let type = self.getAttribute('eh-subscription-type');
                let single = document.getElementById("subscriptionSingle");
                let regular = document.getElementById("subscriptionRegular");
                let go = document.getElementById("subscriptionGo");
                let bond = document.getElementById("subscriptionBond");
                single.setAttribute('eh-subscription-id', id);
                regular.setAttribute('eh-subscription-id', id);
                go.setAttribute('eh-subscription-id', id);
                bond.setAttribute('eh-subscription-id', id);
                let singleUrl = new URL(single.getAttribute("href"));
                let singleOriginAndPath = singleUrl.origin + singleUrl.pathname;
                let singleCombined = singleOriginAndPath + "?";
                let regularUrl = new URL(regular.getAttribute("href"));
                let regularOriginAndPath = regularUrl.origin + regularUrl.pathname;
                let regularCombined = regularOriginAndPath + "?";
                let goUrl = new URL(go.getAttribute("href"));
                let goOriginAndPath = goUrl.origin + goUrl.pathname;
                let goCombined = goOriginAndPath + "?";
                let singleParms = singleUrl.searchParams;
                let regularParms = regularUrl.searchParams;
                let goParms = goUrl.searchParams;
                //行動版
                if (singleParms.has("link")) {
                    let mobilePlatform = store.get("MobilePlatform") || "firste";
                    let singleInsindeUrl = new URL(singleParms.get("link"));
                    let regularInsindUrl = new URL(regularParms.get("link"));
                    let goInsindUrl = new URL(goParms.get("link"));
                    //第e行動
                    if (mobilePlatform == "firste") {
                        for (const [key, value] of singleParms.entries()) {
                            if (key == "link") {
                                singleInsindeUrl.searchParams.delete("FundCode");
                                singleInsindeUrl.searchParams.append("FundCode", id);
                                singleCombined += `${key}=${encodeURIComponent(singleInsindeUrl)}&`;
                                continue;
                            }
                            singleCombined += `${key}=${value}&`;
                        }
                        for (const [key, value] of regularParms.entries()) {
                            if (key == "link") {
                                regularInsindUrl.searchParams.delete("FundCode");
                                regularInsindUrl.searchParams.append("FundCode", id);
                                regularCombined += `${key}=${encodeURIComponent(regularInsindUrl)}&`;
                                continue;
                            }
                            regularCombined += `${key}=${value}&`;
                        }
                        for (const [key, value] of goParms.entries()) {
                            if (key == "link") {
                                goCombined += `${key}=${encodeURIComponent(value + '&')}`;
                                continue;
                            }
                            if (key == "chn" || key == "emp_id") {
                                goCombined += `${key}${encodeURIComponent('=' + value + '&')}`;
                                continue;
                            }
                            if (key == "prdCode") {
                                goCombined += `${key}${encodeURIComponent('=' + id)}&`;
                                continue;
                            }
                            goCombined += `${key}=${value}&`;
                        }
                    } else
                    //iLeo
                    {
                        for (const [key, value] of singleParms.entries()) {
                            if (key == "link") {
                                singleInsindeUrl.searchParams.delete("FundCode");
                                singleInsindeUrl.searchParams.append("FundCode", id);
                                singleCombined += `${key}=${encodeURIComponent(singleInsindeUrl)}&`;
                                continue;
                            }
                            singleCombined += `${key}=${value}&`;
                        }
                        for (const [key, value] of regularParms.entries()) {
                            if (key == "link") {
                                regularInsindUrl.searchParams.delete("FundCode");
                                regularInsindUrl.searchParams.append("FundCode", id);
                                regularCombined += `${key}=${encodeURIComponent(regularInsindUrl)}&`;
                                continue;
                            }
                            regularCombined += `${key}=${value}&`;
                        }
                        for (const [key, value] of goParms.entries()) {
                            if (key == "link") {
                                goInsindUrl.searchParams.delete("FundCode");
                                goInsindUrl.searchParams.append("FundCode", id);
                                goCombined += `${key}=${encodeURIComponent(goInsindUrl)}&`;
                                continue;
                            }
                            goCombined += `${key}=${value}&`;
                        }
                    }
                }
                //第e個網
                else {
                    if (singleParms.has("FundCode")) {
                        for (const [key, value] of singleParms.entries()) {
                            if (key == "FundCode") {
                                singleCombined += `${key}=${id}&`;
                                continue;
                            }
                            singleCombined += `${key}=${value}&`;
                        }
                        for (const [key, value] of regularParms.entries()) {
                            if (key == "FundCode") {
                                regularCombined += `${key}=${id}&`;
                                continue;
                            }
                            regularCombined += `${key}=${value}&`;
                        }
                    }
                    if (goParms.has("prdCode")) {
                        for (const [key, value] of goParms.entries()) {
                            if (key == "prdCode") {
                                goCombined += `${key}=${id}&`;
                                continue;
                            }
                            goCombined += `${key}=${value}&`;
                        }
                    }
                }
                single.setAttribute("href", singleCombined.slice(0, -1));
                regular.setAttribute("href", regularCombined.slice(0, -1));
                go.setAttribute("href", goCombined.slice(0, -1));
                if (type.toLowerCase() == "fund") {
                    $(single).closest('div').removeClass('u-hidden');
                    $(regular).closest('div').removeClass('u-hidden');
                    $(go).closest('div').addClass('u-hidden');
                    $(bond).closest('div').addClass('u-hidden');
                } else if (type.toLowerCase() == "foreignbonds") {
                    $(single).closest('div').addClass('u-hidden');
                    $(regular).closest('div').addClass('u-hidden');
                    $(go).closest('div').addClass('u-hidden');
                    $(bond).closest('div').removeClass('u-hidden');
                } else
                {
                    $(single).closest('div').addClass('u-hidden');
                    $(regular).closest('div').addClass('u-hidden');
                    $(go).closest('div').removeClass('u-hidden');
                    $(bond).closest('div').addClass('u-hidden');
                }
            }
        });

        EventHandler.AddOnce('visit-update', function (e) {
            let self = e;

            var token = $('input[name="__RequestVerificationToken"]').val();

            let params = {
                pageId: self.getAttribute('eh-visit-pageid'),
                url: new URL(location.href).href,
                querystring: self.getAttribute('eh-visit-qs').split('&'),
                __RequestVerificationToken: token
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "VisitCount", "Update")',
                type: 'POST',
                data: params
            }).done(function (data, textStatus, jqXHR) {
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        });

        EventHandler.AddOnExec('visit-exec', function (e) {
            let self = e.target;
            let params = {
                pageId: self.getAttribute('eh-visit-pageid'),
                url: new URL(location.href).href
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "VisitCount", "Get")',
                type: 'GET',
                data: params
            }).done(function (data, textStatus, jqXHR) {
                if (data) {
                    $(self).html(DOMPurify.sanitize(data.Count));
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        });

        EventHandler.AddOnExec('fcbapplogin-init', function (e) {
            let self = e.target;
            let loginType = self.getAttribute('eh-login-type');
            let mobileLoginLink = "@MobileFristeLogin";
            if (loginType == "ileo") {
                mobileLoginLink = "@MobileIleoLogin";
            }
            let mobileLoginUrl = new URL(mobileLoginLink.replaceAll('&amp;', '&'));
            let loginUrl = "";
            let urlOriginAndPath = mobileLoginUrl.origin + mobileLoginUrl.pathname;
            let mobileLoginParms = mobileLoginUrl.searchParams;
            let allParams = mobileLoginParms.entries();
            loginUrl = urlOriginAndPath + "?";
            for (const [key, value] of allParams) {
                if (key == "link") {
                    if (loginType !== "ileo") {
                        loginUrl += `${key}=${encodeURIComponent(value + '&')}`;
                    } else {
                        loginUrl += `${key}=${value + encodeURIComponent('&')}`;
                    }
                    continue;
                }
                if (key == "channel") {
                    loginUrl += `${key}${encodeURIComponent('='+ value + '&')}`;
                    continue;
                }
                if (key == "returnUrl") {
                    loginUrl += `${key}${encodeURIComponent('=')}@(encodeUrl)&`;
                    continue;
                }
                if (key == "ibi") {
                    loginUrl += `${key}=${value}`;
                } else {
                    loginUrl += `${key}=${value}&`;
                }
            }
            //模擬編碼，因channel參數是在link參數裡
            loginUrl = loginUrl.replace('channel=', 'channel%3D');
            self.setAttribute('href', loginUrl);
        });

        EventHandler.AddClick('fcbapplogin-click', function (e) {
            let self = e.target;
            let loginType = self.getAttribute('eh-login-type');
            store.set("MobilePlatform", loginType);
        });

        EventHandler.AddClick('fcblogin-click', function (e) {
            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "Accounts", "WebBankLogin")",
                beforeSend: function () { $('.c-loading').loading('show'); },
                success: function (resp) {
                    console.log(resp)
                    if (resp && resp.success) {
                        let postDataUrl = '@AppPayLoginUrl';
                        postDataUrl = postDataUrl;
                        let postdata =
                        {
                            merchantId: resp.merchantId,
                            txReqId: resp.txReqId,
                            sign: resp.sign,
                        };
                        let form = document.createElement("form");
                        form.setAttribute("method", "post");
                        form.setAttribute("action", postDataUrl);
                        for (let key in postdata) {
                            let hiddenField = document.createElement("input");
                            hiddenField.setAttribute("type", "hidden");
                            hiddenField.setAttribute("name", key);
                            hiddenField.setAttribute("value", postdata[key]);
                            form.appendChild(hiddenField);
                        }
                        document.body.appendChild(form);
                        form.submit();
                    }
                },
                error: function (err) {
                    console.log(err);
                },
                complete: function () { $('.c-loading').loading('hide'); }
            });

        });

        EventHandler.AddClick('focuscancel-click', function (e) {
            let self = e.target;
            let id = self.getAttribute('eh-focus-id');
            let type = self.getAttribute('eh-focus-type');
            let cancelBtn = document.querySelector('[data-set-cancel-focus]');
            cancelBtn.setAttribute('data-cancel-id', id);
            cancelBtn.setAttribute('data-cancel-type', type);
        });

        EventHandler.AddOnExec('focusdate-init', function (e) {
            let focusStore = store.get('focus') || [];
            let focusId = e.target.getAttribute('eh-focus-id');
            if (focusStore.length > 0 && focusId != '') {
                let idx = focusStore.findIndex((x) => x.id == focusId);
                if (idx >= 0) {
                    e.target.innerText = focusStore[idx].trackDate != null ? focusStore[idx].trackDate + "加入關注" : "自iLEO追蹤清單匯入";
                }
            }
        });

        EventHandler.AddOnExec('info-init', function (e) {
            let self = e.target;
            let isHasInfo = $(self).closest("tr").find('[data-infostatus]').data('infostatus');
            if (isHasInfo == true) {
                $(self).addClass('is-active');
            }
        });

        EventHandler.AddClick('info-click', function (e) {
            let self = e.target;
            let type = self.getAttribute('eh-info-type');
            let id = self.getAttribute('eh-info-id');
            let url = $(self).closest("tr").find('[data-id]').attr('href');
            $('[data-set-alert]', '#popupAlert').data('type', type);
            if (type.toLowerCase() != "fund") {
                $("#popupAlert").find('[data-set-title]').text('收盤價');
            } else {
                $("#popupAlert").find('[data-set-title]').text('最新淨值');
            }
            //預設初始值
            window.triggerType = '';
            window.percent = 0;
            $("#popupAlert").find('[data-title]').data('id', $(self).closest("tr").find('[data-id]').data('id'));
            $("#popupAlert").find('[data-title]')[0].setAttribute("href", url);
            $("#popupAlert").find('[data-pricevalue]').data('pricevalue', $(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-netvaluedate]').data('netvaluedate', $(this).closest("tr").find('[data-netvaluedate]').data('netvaluedate'));
            $("#popupAlert").find('[data-title]').text($(self).closest("tr").find('[data-id]').text());
            $("#popupAlert").find('[data-pricevalue]').text($(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-pricevaluedate]').text($(self).closest("tr").find('[data-pricevaluedate]').data('pricevaluedate'));

            let pricevalue = $(self).closest("tr").find('[data-info-pricevalue]').data('info-pricevalue') || '';
            let reachvaluesetdate = $(self).closest("tr").find('[data-info-reachvaluesetdate]').data('info-reachvaluesetdate') || '';
            $("#popupAlert").find('[data-info-pricevalue]').text(pricevalue ? '上次設定淨值 ' + pricevalue : '');
            $("#popupAlert").find('[data-info-reachvaluesetdate]').text(reachvaluesetdate ? '設定日期 ' + reachvaluesetdate : '');
            if (pricevalue || reachvaluesetdate) {
                $('[data-reachvalue]').removeClass('u-hidden');
            } else {
                $('[data-reachvalue]').addClass('u-hidden');
            }

            let risefallpricevalue = $(self).closest("tr").find('[data-info-risefallpricevalue]').data('info-risefallpricevalue') || '';
            let quotechangesetdate = $(self).closest("tr").find('[data-info-quotechangesetdate]').data('info-quotechangesetdate') || '';
            $("#popupAlert").find('[data-info-risefallpricevalue]').text(risefallpricevalue ? '上次設定淨值 ' + risefallpricevalue : '');
            $("#popupAlert").find('[data-info-quotechangesetdate]').text(quotechangesetdate ? '設定日期 ' + quotechangesetdate : '');
            if (risefallpricevalue || quotechangesetdate) {
                $('[data-quotechange]').removeClass('u-hidden');
            } else {
                $('[data-quotechange]').addClass('u-hidden');
            }

            let nowDate = getNowDate();
            let date = new Date();
            let threeMonthLaterDate = dayjs(date.setMonth(date.getMonth() + 3)).format('YYYY/MM/DD');
            $('[data-infostart]').datepicker('setDate', nowDate);
            $('[data-infoend]').datepicker('setDate', threeMonthLaterDate);
            $('[data-infostart]').val(nowDate);
            $('[data-infoend]').val(threeMonthLaterDate);
            $('[data-quotestart]').datepicker('setDate', nowDate);
            $('[data-quoteend]').datepicker('setDate', threeMonthLaterDate);
            $('[data-quotestart]').val(nowDate);
            $('[data-quoteend]').val(threeMonthLaterDate);
            $("#popupAlert").find('[data-alert-price]').val($(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-alert-rise]').val('');
            $("#popupAlert").find('[data-alert-fall]').val('');
            $("#popupAlert").find('[data-count-input]').val(0);
            $("#popupAlert").find('.c-count__text').text(0);
            //根據有無設定過給值
            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "FocusList", "GetProductReachInfo")",
                data: { "type": type, "id": id },
                beforeSend: function () { $('.c-loading').loading('show'); },
                success: function (data) {
                    if (data && data.body.length > 0) {
                        $.each(data.body, function (idx, item) {
                            let startDate = '';
                            let endDate = '';
                            switch (item.infoType) {
                                case "1":
                                    $('input[name="price"]').prop("checked", item.openInfo);
                                    $("#popupAlert").find('[data-alert-price]').val(item.reachValue);
                                    let pvalue = $("#popupAlert").find('[data-pricevalue]').data('pricevalue');
                                    window.triggerType = '';
                                    window.percent = ((item.reachValue - pvalue) / pvalue) * 100;
                                    window.percent = window.percent.toFixed(2);
                                    $('[data-count-input]').trigger('change.count');
                                    startDate = item.infoStartDate.split('T')[0].replaceAll('-', '/');
                                    endDate = item.infoEndDate.split('T')[0].replaceAll('-', '/');
                                    $('[data-infostart]').val(startDate);
                                    $('[data-infoend]').val(endDate);
                                    $('[data-infostart]').datepicker('setDate', startDate);
                                    $('[data-infoend]').datepicker('setDate', endDate);
                                    break;
                                case "2":
                                    $('input[name="quoteChange"]').prop("checked", item.openInfo)
                                    startDate = item.infoStartDate.split('T')[0].replaceAll('-', '/');
                                    endDate = item.infoEndDate.split('T')[0].replaceAll('-', '/');
                                    $("#popupAlert").find('[data-alert-rise]').val(item.risePercent);
                                    $("#popupAlert").find('[data-alert-fall]').val(item.fallPercent);
                                    $('[data-quotestart]').val(startDate);
                                    $('[data-quoteend]').val(endDate);
                                    $('[data-quotestart]').datepicker('setDate', startDate);
                                    $('[data-quoteend]').datepicker('setDate', endDate);
                                    break;
                            }
                        });
                    }
                    $('.c-loading').loading('hide');
                },
                error: function (msg) {
                    console.log(msg)
                },
            });

        });

        EventHandler.AddClick('click-update', function (e) {
            e.preventDefault();

            var token = $('input[name="__RequestVerificationToken"]').val();

            let self = this;
            let params = {
                pageId: $(self).attr('eh-click-pageid'),
                renderingId: $(self).attr('eh-click-renderingid'),
                datasourceId: $(self).attr('eh-click-datasourceid'),
                linkFieldId: $(self).attr('eh-click-linkfieldid'),
                __RequestVerificationToken: token
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "ClickCount", "Update")',
                type: 'POST',
                data: params
            }).done(function (data) {
                console.log(data.Status);
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });

            if ($(self).attr('target') == "_blank") {
                window.open($(self).attr('href'), '_blank');
            }
            else {
                window.location.href = $(self).attr('href');
            }
        });

        EventHandler.AddOnExec('click-exec', function (e) {
            let self = e.target;
            let params = {
                pageId: self.getAttribute('eh-click-pageid'),
                renderingId: self.getAttribute('eh-click-renderingId'),
                datasourceId: self.getAttribute('eh-click-datasourceId'),
                linkFieldId: self.getAttribute('eh-click-linkFieldId'),
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "ClickCount", "Get")',
                type: 'GET',
                data: params
            }).done(function (data) {
                if (data.Status == "Success") {
                    $(self).text(data.Count);
                } else {
                    $(self).text("0");
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        });

        window.activateTabFromUrl = function () {
            let url = new URL(location.href);
            let tabParam = url.searchParams.get('tab');
            if(tabParam){
                let activeTab = `tab-${tabParam}`;
                $(`[data-tab-target=${activeTab}]`).trigger('click');
            }            
        };

    })(jQuery, window, document);
</script>
@Xcms.Sitecore.Foundation.Assets.Services.RenderAssetsService.Current.ScriptsRender("<script type=\"text/javascript\" src=\"{0}\" async ></script>", "/themes/project/wealth/js/utm.min.js")