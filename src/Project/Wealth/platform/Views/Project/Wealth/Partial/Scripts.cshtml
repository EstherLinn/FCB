@using Sitecore.Configuration;
@using Foundation.Wealth.Extensions;
@using Sitecore.Web;
@using Foundation.Wealth.Helper;
@using Feature.Wealth.Account.Helpers;
@{
    var SubcriptionSingleLink = Settings.GetSetting("WebSubscriptionSingle");
    var SubcriptionRegularLink = Settings.GetSetting("WebSubscriptionRegular");
    var MobileESingleLink = Settings.GetSetting("MobileESingle");
    var MobileERegularLink = Settings.GetSetting("MobileERegular");
    var MobileIleoSingleLink = Settings.GetSetting("MobileIleoSingle");
    var MobileIleoRegularLink = Settings.GetSetting("MobileIleoRegular");

}

<script>
    (function ($, window, document, undefined) {

            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "Accounts", "SetUrlCookie")",
                data: { "url": '@System.Web.HttpContext.Current.Request.Url.AbsoluteUri' },
                success: function (msg) {
                    //設置成功
                },
            })
              window.CompareObj = function (id,type,name) {
                    this.id = id;
                    this.type = type;
                    this.name = name;
                }
           window.checkItemExists = function(key, value) {
               let existingEntries = store.get(key) || [];
               let idx = existingEntries.findIndex((x) => x.id == value);
                if (idx < 0) {
                    return false;
                } else {
                    return true;
                }
            }
            window.addItem = function(key, value) {
                let existingEntries = store.get(key) || [];
                let idx = existingEntries.findIndex((x) => x.id == value.id);
                if (idx < 0 ) {
                    existingEntries.push(value);
                    store.set(key, existingEntries)
                }
            }
            window.removeItem = function(key, value) {
                let existingEntries = store.get(key) || [];
                let idx = existingEntries.findIndex((x) => x.id == value.id);
                if (idx > -1) {
                    existingEntries.splice(idx, 1);
                    store.set(key, existingEntries)
                }
            }

        EventHandler.AddExec('compare-init', function (self) {
            let $this = $(self);
            let id = self.getAttribute('eh-compare-id');
            let compare = store.get('compare');
            if (checkItemExists('compare', id)) {
                $this.addClass('is-active');
                self.setAttribute('eh-compare-add', true);
            };

            if (compare.length == 7) {
                if (self.getAttribute('eh-compare-add').toString() == "false")
                {
                    self.setAttribute('href', '#popupCompareMax');
                    self.setAttribute('data-popup', true);
                    self.removeAttribute('data-ia');
                    self.removeAttribute('data-msg');
                    $(self).off('click.interactive');
                    $(self).removeData('plugin_interactive');
                    $(self).magnificPopup();
                }
            }
        });
        EventHandler.AddClick('compare-click', function () {
            let $this = $(this);
            $this.css('visibility', 'hidden');
            setTimeout(() => $this.css('visibility', ''), 750);
            let id = this.getAttribute('eh-compare-id');
            let name = this.getAttribute('eh-compare-name');
            let type = this.getAttribute('eh-compare-type').toLowerCase();
            let obj = new CompareObj(id, type, name);
            let compare = store.get('compare');
            if (this.getAttribute('eh-compare-add').toString() == "false") {
                if (compare.length < 7) {
                    addItem('compare', obj);
                    this.setAttribute('eh-compare-add', true);
                    if (compare.length == 6) {
                        $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                                   ele.setAttribute('href', '#popupCompareMax');
                                    ele.setAttribute('data-popup', true);
                                    ele.removeAttribute('data-ia');
                                    ele.removeAttribute('data-msg');
                                    $(ele).off('click.interactive');
                                    $(ele).removeData('plugin_interactive');
                                    $(ele).magnificPopup();
                        })
                    }
                }
            } else {
                removeItem('compare', obj);
                this.setAttribute('eh-compare-add', false);
                if(compare.length == 7){
                    $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                        ele.setAttribute('href', 'javascript:;');
                        ele.removeAttribute('data-popup');
                        ele.setAttribute('data-ia', 'true');
                        ele.setAttribute('data-msg', '加入比較|取消比較');
                        $(ele).interactive();
                        $(ele).off('click.magnificPopup');
                })
                }
            }
    });


        EventHandler.AddExec('focus-init', function (self) {
            let $this = $(self);
            let id = self.getAttribute('eh-focus-id');
            if (checkItemExists('focus', id)) {
                $this.addClass('is-active');
                self.setAttribute('eh-focus-add', true);
            };
        });
        EventHandler.AddClick('focus-click', function () {
            let $this = $(this);
            $this.css('visibility', 'hidden');
            setTimeout(() => $this.css('visibility', ''), 750);
            let id = this.getAttribute('eh-focus-id');
            let name = this.getAttribute('eh-focus-name');
            let type = this.getAttribute('eh-focus-type').toLowerCase();
            let obj = new CompareObj(id, type, name);
            if (this.getAttribute('eh-focus-add').toString() == "false") {
                    addItem('focus', obj);
                this.setAttribute('eh-focus-add', true);
            } else {
                removeItem('focus', obj);
                this.setAttribute('eh-focus-add', false);
            }
        });

          EventHandler.AddExec('subscription-init',function(self){
              let $this = self;
              let single = document.getElementById("subscriptionSingle");
              let regular = document.getElementById("subscriptionRegular");
                @if (!FcbMemberHelper.CheckMemberLogin())
                {
                    @: $this.setAttribute("href","#popupLogin");
                }
                else
                {
                    @: $this.setAttribute("href", "#popupPurchase");
                }



               if ($(window).width() < 768)
            {
                $('input[name="platform"]').on('click', function () {
                    let val = $(this).data('name');
                    if (val == "firste") {
                        single.setAttribute("href", "@MobileESingleLink");
                        regular.setAttribute("href", "@MobileERegularLink");

                    } else {
                        single.setAttribute("href", "@MobileIleoSingleLink");
                        regular.setAttribute("href", "@MobileIleoRegularLink");
                    }
                    store.set("MobilePlatform", val);
                });
            }else
            {
                   single.setAttribute("href", "@SubcriptionSingleLink");
                   regular.setAttribute("href", "@SubcriptionRegularLink");
            }
              if (localStorage.hasOwnProperty('MobilePlatform'))
          {
                  let val = store.get('MobilePlatform');
              if (val == "firste") {
                  $('input[data-name="firste"]','#popupPurchase').prop('checked', true);
                  $('input[data-name="firste"]').trigger('click');
              } else {
                  $('input[data-name="ileo"]','#popupPurchase').prop('checked', true);

                  $('input[data-name="ileo"]','#popupPurchase').trigger('click');
              }
          }else{
                  $('input[data-name="firste"]','#popupPurchase').trigger('click');
          }
          });

            EventHandler.AddClick('subscription-click', function () {
                let id = this.getAttribute('eh-subscription-id');
                let lastId = store.get("lastsubscription");
                let single = document.getElementById("subscriptionSingle");
                let regular =  document.getElementById("subscriptionRegular");
                if (localStorage.hasOwnProperty("lastsubscription")) {
                    single.setAttribute("href", single.getAttribute("href").replaceAll("{}", id));
                    regular.setAttribute("href", regular.getAttribute("href").replaceAll("{}", id));
                } else {
                    single.setAttribute("href", single.getAttribute("href").replaceAll(lastId, id));
                    regular.setAttribute("href", regular.getAttribute("href").replaceAll(lastId, id));
                    store.set("lastsubscription", id);
                }
            });

            })(jQuery, window, document);
</script>
@Xcms.Sitecore.Foundation.Assets.Services.RenderAssetsService.Current.ScriptsRender("<script type=\"text/javascript\" src=\"{0}\" async ></script>", "/themes/project/wealth/js/utm.min.js")