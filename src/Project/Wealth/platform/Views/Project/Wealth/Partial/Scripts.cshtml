@using Sitecore.Configuration;
@using Foundation.Wealth.Helper;
@using Feature.Wealth.Account.Helpers;
@{
    var AppPayLoginUrl = WebUtility.UrlDecode(Settings.GetSetting("AppPay.CallLoginUrl"));
    var MobileFristeLogin = WebUtility.UrlDecode(Settings.GetSetting("MobileFirste"));
    var MobileIleoLogin = WebUtility.UrlDecode(Settings.GetSetting("MobileIleo"));
    var domain = HttpContext.Current.Request.Url.Host;
    var sitecoredomain = Sitecore.Context.Site.TargetHostName;
    var url = HttpContext.Current.Request.Url.AbsoluteUri.Replace(domain, string.IsNullOrEmpty(sitecoredomain) ? domain : sitecoredomain);
    var newUri = new Uri(url);
    string uriSchemaAndHost = string.Format("{0}://{1}", newUri.Scheme, newUri.Host);
    var webBankLoginPath = ClientRoute.GenerateUrl(this, "Accounts", "SignInWebBankByApp");
    var encodeUrl = uriSchemaAndHost + webBankLoginPath;
    encodeUrl = WebUtility.UrlEncode(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(encodeUrl)));
}
<script>
    (function ($, window, document, undefined) {
        let isLogin = false;
        if (SC_DATA.IsLoggedIn) {
            isLogin = true ;
        }
        if (SC_DATA.IsGlobalStyle) {
            $('html').addClass('is-globalization');
        }
        $.ajax({
            type: "post",
            url: "@ClientRoute.GenerateUrl(this, "Accounts", "SetUrlCookie")",
            data: { "url": '@url' },
            success: function (msg) {
                //設置成功
            },
        })
        if (isLogin) {
            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "Accounts", "GetTrackListFromDb")",
                success: function (msg) {
                    console.log("TrackListFromDb :");
                    console.log(msg);
                    store.set('focus', msg);
                    $('[eh-focus]').trigger('exec');
                },
            })
            if (SC_DATA.WebBankId) {
                    $.ajax({
                        type: "post",
                        url: "@ClientRoute.GenerateUrl(this, "Accounts", "GetTrackListFromFcb")",
                        data: { "promotionCode": SC_DATA.WebBankId },
                        success: function (msg) {
                            console.log("TrackListFromFcb :");
                            console.log(msg);
                        },
                        error: function (msg) {
                            console.log("TrackListFromFcb :");
                            console.log(msg);
                        }
                    })
                 }
        }
        window.CompareObj = function (id, type, name) {
            this.id = id;
            this.type = type;
            this.name = name;
        }
        window.FocsuObj = function (id, type) {
            this.id = id;
            this.type = type;
            this.trackDate = getNowDate();
        }
        window.checkItemExists = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value);
            if (idx < 0) {
                return false;
            } else {
                return true;
            }
        }
        window.addItem = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value.id);
            if (idx < 0) {
                existingEntries.push(value);
                store.set(key, existingEntries)
            }
        }
        window.removeItem = function (key, value) {
            let existingEntries = store.get(key) || [];
            let idx = existingEntries.findIndex((x) => x.id == value.id);
            if (idx > -1) {
                existingEntries.splice(idx, 1);
                store.set(key, existingEntries)
            }
        }

        window.getNowDate = function ()
        {
            let now = new Date();
            return now.toISOString().split('T')[0].replaceAll('-','/') ;
        }
        EventHandler.AddOnExec('compare-init', function (e) {
            let self = e.target;
            $(self).interactive();
            let id = self.getAttribute('eh-compare-id');
            let compare = store.get('compare') || [];
            if (checkItemExists('compare', id)) {
                $(self).addClass('is-active');
                self.setAttribute('eh-compare-add', true);
            }else{
                  $(self).removeClass('is-active');
                self.setAttribute('eh-compare-add', false);
            };
            if (compare.length == 7) {
                if (self.getAttribute('eh-compare-add').toString() == "false") {
                    self.setAttribute('href', '#popupCompareMax');
                    self.setAttribute('data-popup', true);
                    self.removeAttribute('data-ia');
                    self.removeAttribute('data-msg');
                    $(self).off('click.interactive');
                    $(self).removeData('plugin_interactive');
                    $(self).magnificPopup();
                }
            }
        });
        EventHandler.AddClick('compare-click', function (e) {
            let self = e.target;
            let id = self.getAttribute('eh-compare-id');
            let name = self.getAttribute('eh-compare-name');
            let type = self.getAttribute('eh-compare-type').toLowerCase();
            let obj = new CompareObj(id, type, name);
            let compare = store.get('compare') || [];
            if (self.getAttribute('eh-compare-add').toString() == "false") {
                if (compare.length < 7) {
                    addItem('compare', obj);
                    self.setAttribute('eh-compare-add', true);
                    if (compare.length == 6) {
                        $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                            ele.setAttribute('href', '#popupCompareMax');
                            ele.setAttribute('data-popup', true);
                            ele.removeAttribute('data-ia');
                            ele.removeAttribute('data-msg');
                            $(ele).off('click.interactive');
                            $(ele).removeData('plugin_interactive');
                            $(ele).magnificPopup();
                        })
                    }
                }
            } else {
                removeItem('compare', obj);
                self.setAttribute('eh-compare-add', false);
                if (compare.length == 7) {
                    $('[eh-compare][eh-compare-add=false]').each(function (idx, ele) {
                        ele.setAttribute('href', 'javascript:;');
                        ele.removeAttribute('data-popup');
                        ele.setAttribute('data-ia', 'true');
                        ele.setAttribute('data-msg', '加入比較|取消比較');
                        $(ele).interactive();
                        $(ele).off('click.magnificPopup');
                    })
                }
            }
            //reload 側邊比較工具
            window.SetCompareList();
        });


        EventHandler.AddOnExec('focus-init', function (e) {
            let self = e.target;
            if (!isLogin) {
                self.setAttribute("href", "#popupLogin");
                self.setAttribute('data-popup', true);
                self.removeAttribute('data-ia');
                self.removeAttribute('data-msg');
                $(self).off('click.interactive');
                $(self).removeData('plugin_interactive');
                $(self).magnificPopup();
            } else {
                $(self).interactive();
                let id = self.getAttribute('eh-focus-id');
                if (id) {
                    if (checkItemExists('focus', id)) {
                        $(self).addClass('is-active');
                        self.setAttribute('eh-focus-add', true);
                    };
                } else {
                    $(self).off('click.interactive');
                    $(self).removeData('plugin_interactive');
                }
            }
        });
        EventHandler.AddClick('focus-click', function (e) {
            let self = e.target;
            if (isLogin) {
                let id = self.getAttribute('eh-focus-id');
                let name = self.getAttribute('eh-focus-name');
                let type = self.getAttribute('eh-focus-type');
                if (id && name && type) {
                    let obj = new FocsuObj(id, type);
                    if (self.getAttribute('eh-focus-add').toString() == "false") {
                        addItem('focus', obj);
                        self.setAttribute('eh-focus-add', true);
                    } else {
                        removeItem('focus', obj);
                        self.setAttribute('eh-focus-add', false);
                    }
                   $.ajax({
                    type: "post",
                    url: "@ClientRoute.GenerateUrl(this, "Accounts", "InsertTrack")",
                    data: { "trackList": store.get("focus") || [] },
                    beforeSend: function () { $('.c-loading').loading('show'); },
                       success: function (msg) {
                           $('.c-loading').loading('hide');
                     },
                    error: function (msg) {
                         //設置error
                        if (self.getAttribute('eh-focus-add').toString() == "false") {
                            removeItem('focus', obj);
                            self.setAttribute('eh-focus-add', false);
                        } else {
                            addItem('focus', obj);
                            self.setAttribute('eh-focus-add', true);
                        }
                     },
                })
                }

            }
        });

        EventHandler.AddOnExec('subscription-init', function (e) {
            let self = e.target;
            if (!isLogin) {
                self.setAttribute("href", "#popupLogin");
            }
            else {
                self.setAttribute("href", "#popupPurchase");
            }
        });

        EventHandler.AddClick('subscription-click', function (e) {
            if (isLogin) {
                let self = e.target;
                let id = self.getAttribute('eh-subscription-id');
                let type = self.getAttribute('eh-subscription-type');
                    let single = document.getElementById("subscriptionSingle");
                    let regular = document.getElementById("subscriptionRegular");
                    let go = document.getElementById("subscriptionGo");
                    single.setAttribute('eh-subscription-id', id);
                    regular.setAttribute('eh-subscription-id', id);
                    go.setAttribute('eh-subscription-id', id);
                    let singleUrl = new URL(single.getAttribute("href"));
                    let singleOriginAndPath = singleUrl.origin + singleUrl.pathname;
                    let singleCombined = singleOriginAndPath + "?";
                    let regularUrl = new URL(regular.getAttribute("href"));
                    let regularOriginAndPath = regularUrl.origin + regularUrl.pathname;
                    let regularCombined = regularOriginAndPath + "?";
                    let goUrl = new URL(go.getAttribute("href"));
                    let goOriginAndPath = goUrl.origin + goUrl.pathname;
                    let goCombined = goOriginAndPath + "?";
                    let singleParms = singleUrl.searchParams;
                    let regularParms = regularUrl.searchParams;
                    let goParms = goUrl.searchParams;
                     //行動版
                    if (singleParms.has("link")) {
                        let mobilePlatform = store.get("MobilePlatform") || "firste";
                        let singleInsindeUrl = new URL(singleParms.get("link"));
                        let regularInsindUrl = new URL(regularParms.get("link"));
                        let goInsindUrl = new URL(goParms.get("link"));
                        //第e行動
                        if (mobilePlatform == "firste") {
                            for (const [key, value] of singleParms.entries()) {
                                if (key == "link") {
                                    singleInsindeUrl.searchParams.delete("FundCode");
                                    singleInsindeUrl.searchParams.append("FundCode", id);
                                    singleCombined += `${key}=${encodeURIComponent(singleInsindeUrl)}&`;
                                    continue;
                                }
                                singleCombined += `${key}=${value}&`;
                            }
                            for (const [key, value] of regularParms.entries()) {
                                if (key == "link") {
                                    regularInsindUrl.searchParams.delete("FundCode");
                                    regularInsindUrl.searchParams.append("FundCode", id);
                                    regularCombined += `${key}=${encodeURIComponent(regularInsindUrl)}&`;
                                    continue;
                                }
                                regularCombined += `${key}=${value}&`;
                            }
                            for (const [key, value] of goParms.entries()) {
                                if (key == "link") {
                                    goCombined += `${key}=${encodeURIComponent(value + '&')}`;
                                    continue;
                                }
                                if (key == "chn" || key == "emp_id") {
                                    goCombined += `${key}${encodeURIComponent('='+ value + '&')}`;
                                    continue;
                                }
                                if (key == "prdCode") {
                                    goCombined += `${key}${encodeURIComponent('=' + id)}&`;
                                    continue;
                                }
                                goCombined += `${key}=${value}&`;
                            }
                        } else
                         //iLeo
                        {
                            for (const [key, value] of singleParms.entries()) {
                                if (key == "link") {
                                    singleInsindeUrl.searchParams.delete("FundCode");
                                    singleInsindeUrl.searchParams.append("FundCode", id);
                                    singleCombined += `${key}=${encodeURIComponent(singleInsindeUrl)}&`;
                                    continue;
                                }
                                singleCombined += `${key}=${value}&`;
                            }
                            for (const [key, value] of regularParms.entries()) {
                                if (key == "link") {
                                    regularInsindUrl.searchParams.delete("FundCode");
                                    regularInsindUrl.searchParams.append("FundCode", id);
                                    regularCombined += `${key}=${encodeURIComponent(regularInsindUrl)}&`;
                                    continue;
                                }
                                regularCombined += `${key}=${value}&`;
                            }
                            for (const [key, value] of goParms.entries()) {
                                if (key == "link") {
                                    goInsindUrl.searchParams.delete("FundCode");
                                    goInsindUrl.searchParams.append("FundCode", id);
                                    goCombined += `${key}=${encodeURIComponent(goInsindUrl)}&`;
                                    continue;
                                }
                                goCombined += `${key}=${value}&`;
                            }
                        }
                    }
                    //第e個網
                    else {
                        if (singleParms.has("FundCode")) {
                            for (const [key, value] of singleParms.entries()) {
                                if (key == "FundCode") {
                                    singleCombined += `${key}=${id}&`;
                                    continue;
                                }
                                singleCombined += `${key}=${value}&`;
                            }
                            for (const [key, value] of regularParms.entries()) {
                                if (key == "FundCode") {
                                    regularCombined += `${key}=${id}&`;
                                    continue;
                                }
                                regularCombined += `${key}=${value}&`;
                            }
                        }
                        if (goParms.has("prdCode")) {
                            for (const [key, value] of goParms.entries()) {
                                if (key == "prdCode") {
                                    goCombined += `${key}=${id}&`;
                                    continue;
                                }
                                goCombined += `${key}=${value}&`;
                            }
                        }
                }
                    single.setAttribute("href", singleCombined.slice(0, -1));
                    regular.setAttribute("href", regularCombined.slice(0, -1));
                    go.setAttribute("href", goCombined.slice(0, -1));
                if (type.toLowerCase() == "fund") {
                    $(single).closest('div').removeClass('u-hidden');
                    $(regular).closest('div').removeClass('u-hidden');
                    $(go).closest('div').addClass('u-hidden');
                } else {
                    $(single).closest('div').addClass('u-hidden');
                    $(regular).closest('div').addClass('u-hidden');
                    $(go).closest('div').removeClass('u-hidden');
                }
            }
        });

        EventHandler.AddOnce('visit-update', function (e) {
            let self = e;
            let params = {
                pageId: self.getAttribute('eh-visit-pageid'),
                url: new URL(location.href).href,
                querystring: self.getAttribute('eh-visit-qs').split('&')
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "VisitCount", "Update")',
                type: 'POST',
                data: params
            }).done(function (data, textStatus, jqXHR) {
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        });

        EventHandler.AddOnExec('visit-exec', function (e) {
            let self = e.target;
            let params = {
                pageId: self.getAttribute('eh-visit-pageid'),
                url: new URL(location.href).href
            };

            $.ajax({
                url: '@ClientRoute.GenerateUrl(this, "VisitCount", "Get")',
                type: 'GET',
                data: params
            }).done(function (data, textStatus, jqXHR) {
                if (data) {
                    $(self).html(DOMPurify.sanitize(data.Count));
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
            });
        });
        EventHandler.AddOnExec('fcbapplogin-init', function (e) {
            let self = e.target;
            let loginType = self.getAttribute('eh-login-type');
                let mobileLoginLink = "@MobileFristeLogin";
                if (loginType == "ileo") {
                    mobileLoginLink ="@MobileIleoLogin";
                }
            let mobileLoginUrl = new URL(mobileLoginLink.replaceAll('&amp;', '&'));
            let loginUrl = "";
            let urlOriginAndPath = mobileLoginUrl.origin + mobileLoginUrl.pathname;
            let mobileLoginParms = mobileLoginUrl.searchParams;
            let allParams = mobileLoginParms.entries();
            loginUrl = urlOriginAndPath + "?";
            for (const [key, value] of allParams) {
                if (key == "link") {
                    if (loginType !== "ileo") {
                        loginUrl += `${key}=${encodeURIComponent(value + '&')}`;
                    } else {
                        loginUrl += `${key}=${value + encodeURIComponent('&')}`;
                    }
                    continue;
                }
                if (key == "channel" ) {
                    loginUrl += `${key}=${encodeURIComponent(value + '&')}`;
                    continue;
                }
                if (key == "returnUrl") {
                    loginUrl += `${key}${encodeURIComponent('=')}@(encodeUrl)&`;
                    continue;
                }
                if (key== "ibi") {
                    loginUrl += `${key}=${value}`;
                } else {
                    loginUrl += `${key}=${value}&`;
                }
            }
            self.setAttribute('href', loginUrl);
        });

         EventHandler.AddClick('fcbapplogin-click', function (e) {
            let self = e.target;
            let loginType = self.getAttribute('eh-login-type');
             store.set("MobilePlatform", loginType);
        });

        EventHandler.AddClick('fcblogin-click', function (e) {
                $.ajax({
                    type: "post",
                    url: "@ClientRoute.GenerateUrl(this, "Accounts", "WebBankLogin")",
                    beforeSend: function () { $('.c-loading').loading('show'); },
                    success: function (resp) {
                        console.log(resp)
                        if (resp && resp.success) {
                            let postDataUrl = '@AppPayLoginUrl';
                            postDataUrl = postDataUrl + `?merchantId=${resp.merchantId}&txReqId=${resp.txReqId}&sign=${resp.sign}`;
                            let postdata =
                            {
                                merchantId: resp.merchantId,
                                txReqId: resp.txReqId,
                                sign: resp.sign,
                            };
                            let form = document.createElement("form");
                            form.setAttribute("method", "post");
                            form.setAttribute("action", postDataUrl);
                            for (let key in postdata) {
                                let hiddenField = document.createElement("input");
                                hiddenField.setAttribute("type", "hidden");
                                hiddenField.setAttribute("name", key);
                                hiddenField.setAttribute("value", postdata[key]);
                                form.appendChild(hiddenField);
                            }
                            document.body.appendChild(form);
                            form.submit();
                        }
                    },
                    error: function (err) {
                        console.log(err);
                    },
                    complete: function () { $('.c-loading').loading('hide'); }
                });

        });

        EventHandler.AddClick('focuscancel-click', function (e) {
            let self = e.target;
            let id = self.getAttribute('eh-focus-id');
            let type = self.getAttribute('eh-focus-type');
            let cancelBtn = document.querySelector('[data-set-cancel-focus]');
            cancelBtn.setAttribute('data-cancel-id', id);
            cancelBtn.setAttribute('data-cancel-type', type);
        });
        EventHandler.AddOnExec('focusdate-init', function (e) {
            let focusStore = store.get('focus') || [];
            let focusId = e.target.getAttribute('eh-focus-id');
            if (focusStore.length > 0 && focusId != '') {
                let idx = focusStore.findIndex((x) => x.id == focusId);
                if (idx >= 0) {
                    e.target.innerText = focusStore[idx].trackDate + "加入關注";
                }
            }
        });
        EventHandler.AddOnExec('info-init', function (e) {
            let self = e.target;
            let isHasInfo = $(self).closest("tr").find('[data-infostatus]').data('infostatus');
            if (isHasInfo == true) {
                $(self).addClass('is-active');
            }
        });
        EventHandler.AddClick('info-click', function (e) {
            let self = e.target;
            let type = self.getAttribute('eh-info-type');
            let id = self.getAttribute('eh-info-id');
            let url = $(self).closest("tr").find('[data-id]').attr('href');
            $('[data-set-alert]', '#popupAlert').data('type', type);
            if (type.toLowerCase() != "fund") {
                $("#popupAlert").find('[data-set-title]').text('收盤價');
            } else {
                $("#popupAlert").find('[data-set-title]').text('最新淨值');
            }
            $("#popupAlert").find('[data-title]').data('id', $(self).closest("tr").find('[data-id]').data('id'));
            $("#popupAlert").find('[data-title]')[0].setAttribute("href", url);
            $("#popupAlert").find('[data-pricevalue]').data('pricevalue', $(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-netvaluedate]').data('netvaluedate', $(this).closest("tr").find('[data-netvaluedate]').data('netvaluedate'));
            $("#popupAlert").find('[data-title]').text($(self).closest("tr").find('[data-id]').text());
            $("#popupAlert").find('[data-pricevalue]').text($(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-pricevaluedate]').text($(self).closest("tr").find('[data-pricevaluedate]').data('pricevaluedate'));
            let nowDate = getNowDate();
            let date = new Date();
            let setDate = new Date(date.getFullYear(), date.getMonth() + 3, date.getDate());
            let threeMonthLaterDate = setDate.toISOString().split('T')[0].replaceAll('-', '/');
            $('[data-infostart]').datepicker('setDate', nowDate);
            $('[data-infoend]').datepicker('setDate', threeMonthLaterDate);
            $('[data-infostart]').val(nowDate);
            $('[data-infoend]').val(threeMonthLaterDate);
            $('[data-quotestart]').datepicker('setDate', nowDate);
            $('[data-quoteend]').datepicker('setDate', threeMonthLaterDate);
            $('[data-quotestart]').val(nowDate);
            $('[data-quoteend]').val(threeMonthLaterDate);
            $("#popupAlert").find('[data-alert-price]').val($(self).closest("tr").find('[data-pricevalue]').data('pricevalue'));
            $("#popupAlert").find('[data-alert-rise]').val('');
            $("#popupAlert").find('[data-alert-fall]').val('');
            $("#popupAlert").find('[data-count-input]').val(0);
            $("#popupAlert").find('.c-count__text').text(0);

            $.ajax({
                type: "post",
                url: "@ClientRoute.GenerateUrl(this, "FocusList", "GetProductReachInfo")",
                data: { "type": type, "id": id },
                beforeSend: function () { $('.c-loading').loading('show'); },
                success: function (data) {
                    if (data && data.body.length > 0)
                    {
                        $.each(data.body, function (idx, item) {
                            let startDate = '';
                            let endDate = '';
                            switch (item.infoType) {
                                case "1":
                                    if (item.openInfo) {
                                        $('input[name="price"]').prop("checked")
                                    }
                                    $("#popupAlert").find('[data-alert-price]').val(item.reachValue).trigger('change.count');
                                    startDate = item.infoStartDate.split('T')[0].replaceAll('-','/');
                                    endDate= item.infoEndDate.split('T')[0].replaceAll('-','/');
                                    $('[data-infostart]').val(startDate);
                                    $('[data-infoend]').val(endDate);
                                    $('[data-infostart]').datepicker('setDate', startDate);
                                    $('[data-infoend]').datepicker('setDate', endDate);
                                    break;
                                case "2":
                                    if (item.openInfo) {
                                        $('input[name="quoteChange"]').prop("checked")
                                    }
                                    startDate = item.infoStartDate.split('T')[0].replaceAll('-','/');
                                    endDate= item.infoEndDate.split('T')[0].replaceAll('-','/');
                                    $("#popupAlert").find('[data-alert-rise]').val(item.risePercent);
                                    $("#popupAlert").find('[data-alert-fall]').val(item.fallPercent);
                                    $('[data-quotestart]').val(startDate);
                                    $('[data-quoteend]').val(endDate);
                                    $('[data-quotestart]').datepicker('setDate', startDate);
                                    $('[data-quoteend]').datepicker('setDate', endDate);
                                    break;
                            }
                        });
                    }
                    $('.c-loading').loading('hide');
                },
                error: function (msg) {
                    console.log(msg)
                },
            });

        });


    })(jQuery, window, document);
</script>
@Xcms.Sitecore.Foundation.Assets.Services.RenderAssetsService.Current.ScriptsRender("<script type=\"text/javascript\" src=\"{0}\" async ></script>", "/themes/project/wealth/js/utm.min.js")