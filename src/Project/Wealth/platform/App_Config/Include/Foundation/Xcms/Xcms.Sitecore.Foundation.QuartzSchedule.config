<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:search="http://www.sitecore.net/xmlconfig/search/" xmlns:environment="http://www.sitecore.net/xmlconfig/environment/">
  <sitecore>
    <settings>
      <!-- Context DB for execution -->
      <setting name="SiteCronContextDB" value="$(defaultContentDatabaseName)" />
      <!-- Amount of seconds to add to the execute now task. Please make sure the setting is above 5 seconds to give enough time for SiteCron to reload. -->
      <setting name="SiteCronExecuteNowSeconds" value="30" />
      <!-- Highly Experimental -->
      <setting name="SiteCron.SavedHandlerType" value="" />
      <!-- SiteCron Environment variable which can be used while logging/email or getting environment specific settings -->
      <setting name="SiteCron.Environment" value="">
        <patch:attribute name="value" environment:require="Development">Development</patch:attribute>
        <patch:attribute name="value" environment:require="Staging">Staging</patch:attribute>
        <patch:attribute name="value" environment:require="Production">Production</patch:attribute>
      </setting>
      <!-- In order to load all SiteCron scheduled items from the search index, we need a list of valid templates. We could have done this by writing custom content search code that might come later. Comma separated my friend! -->
      <setting name="SiteCron.ValidTemplates" value="{7F2C8881-6AE4-48CF-A499-7745CC4B2EB2},{49A27DC8-2A6A-48A2-A8EF-02A3DD0D3274},{B9B437B2-789C-48F6-AAE2-B49C4AA2A4BB},{40F6016F-C38D-4024-8B48-7DE2655E6007}" />

      <!-- Index used to perform Content Search that returns all SiteCron items based on the templates defined in the SiteCron.ValidTemplates setting-->
      <setting name="SiteCron.GetItemIndex" value="sitecore_master_index" />

      <!-- If using an Dedicated Publishing instance then by default run SiteCron jobs on the DP Server - set to false to run on CM -->
      <setting name="UsePublishingInstanceAsPrimaryServer" value="false" />

      <!-- Setting to enable disable Execute Now context menu -->
      <setting name="SiteCron.EnableExecuteNow" value="true" />
    </settings>
    <commands>
      <command name="sitecron:executejob" type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Commands.ExecuteJob, Xcms.Sitecore.Foundation.QuartzSchedule" resolve="true" />
    </commands>
    <events>
      <event name="item:saved">
        <handler type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Events.SitecronSavedHandler, Xcms.Sitecore.Foundation.QuartzSchedule" method="OnItemSaved" resolve="true" />
      </event>
      <event name="item:saved:remote" role:require="ContentDelivery">
        <handler type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Events.SitecronSavedHandler, Xcms.Sitecore.Foundation.QuartzSchedule" method="OnItemSaved" resolve="true" />
      </event>
      <event name="item:saving">
        <handler type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Events.SitecronSavingHandler, Xcms.Sitecore.Foundation.QuartzSchedule" method="OnItemSaving" />
      </event>
      <event name="item:deleted">
        <handler type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Events.SitecronDeletedHandler, Xcms.Sitecore.Foundation.QuartzSchedule" method="OnItemDeleted" resolve="true" />
      </event>
      <event name="item:deleted:remote" role:require="ContentDelivery">
        <handler type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Events.SitecronDeletedHandler, Xcms.Sitecore.Foundation.QuartzSchedule" method="OnItemDeletedRemote" resolve="true" />
      </event>
    </events>
    <pipelines>
      <initialize>
        <processor type="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Pipelines.InitializeSitecron, Xcms.Sitecore.Foundation.QuartzSchedule" resolve="true" patch:after="*[last()]" />
      </initialize>
    </pipelines>
    <services>
      <register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.IScheduleManager, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.DefaultScheduleManager, Xcms.Sitecore.Foundation.QuartzSchedule" />

      <!-- DB Only Provider to load SiteCron Jobs -->
      <register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ISitecronJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.InheritingSitecronJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" />

      <!-- Config Only Provider to load SiteCron Jobs from config files -->
      <!--<register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ISitecronJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ConfigJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" />-->

      <!-- DB jobs and Config jobs Provider to load SiteCron Jobs from config files -->
      <!--<register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ISitecronJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.DBAndConfigJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" />-->

      <!-- Index Provider to load SiteCron Jobs -->
      <!--<register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ISitecronJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.IndexJobProvider, Xcms.Sitecore.Foundation.QuartzSchedule" />-->

      <register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.ISitecronJobValidator, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Jobs.SitecronJobValidator, Xcms.Sitecore.Foundation.QuartzSchedule" />
      <register serviceType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Scheduling.ISitecronScheduler, Xcms.Sitecore.Foundation.QuartzSchedule" implementationType="Xcms.Sitecore.Foundation.QuartzSchedule.Sitecron.Core.Scheduling.QuartzSitecronScheduler, Xcms.Sitecore.Foundation.QuartzSchedule" />
    </services>
    <log4net>
      <appender name="SitecronLogFileAppender" type="log4net.Appender.RollingFileAppender, Sitecore.Logging">
        <file value="$(dataFolder)/logs/Sitecron.log" />
        <appendToFile value="true" />
        <rollingStyle value="Composite" />
        <staticLogFileName value="false" />
        <datePattern value=".yyyyMMdd'.txt'" />
        <preserveLogFileNameExtension value="true" />
        <maxSizeRollBackups value="-1" />
        <maximumFileSize value="10MB" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern set:value="%d{ISO8601} %-5p [%4t] %m%n" />
        </layout>
        <encoding value="utf-8" />
      </appender>
      <logger name="Xcms.Sitecore.Foundation.QuartzSchedule" additivity="false">
        <level value="INFO" />
        <appender-ref ref="SitecronLogFileAppender" />
        <appender-ref ref="AzureFallbackAppender" desc="AzureFallbackAppender" />
      </logger>
    </log4net>
  </sitecore>
</configuration>